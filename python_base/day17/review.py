"""
    复习
    生成器
        特点:惰性操作
        本质:可迭代对象 + 迭代器
        面试题: 请简述生成器与迭代器的关系?
            生成器函数会通过yield将代码编译为迭代器的next方法.
            就可以一次循环,一次计算,一次返回,从而实现惰性操作.
            便可节省内存空间.

        生成器函数:
            class 生成器:
                def __iter__():
                    return self

                def __next__():
                    return 数据

            def 方法名称():
                ...
                yield 数据
                ...

            for item in 方法名():
                item

            延迟/惰性 --> 立即
                容器(方法名())

        生成器表达式:
            (对象item操作 for item in 可迭代对象)
            (对象item操作 for item in 可迭代对象 if 条件)

    函数式编程
         将函数作为参数
            参数是数据,传递数值,字符串,容器,自定义类
            参数是逻辑(行为/算法/功能),传递函数.

            待重构代码:
                def 功能1():
                    不变的代码
                    变化的代码1

                def 功能2():
                    不变的代码
                    变化的代码2

                def 功能3():
                    不变的代码
                    变化的代码3

            "封装":分
                def 条件1():
                    变化的代码1
                def 条件2():
                    变化的代码2
                def 条件3():
                    变化的代码3

                def 稳定的/通用的():
                    不变的代码

            "继承":隔
                 def 稳定的/通用的(参数):
                    不变的代码
                    参数()
            "多态":执
                稳定的/通用的(条件3)

            list_helper.py
                def 稳定的/通用的():
                    ....

         将函数作为返回值
            ....

"""













